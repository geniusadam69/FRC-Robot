// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5329.ProperRobot;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.PIDCommand;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5329.ProperRobot.commands.*;
import org.usfirst.frc5329.ProperRobot.subsystems.*;

import com.kauailabs.navx.frc.AHRS;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

   
    
    public static Drivetrain drivetrain;
    public static SolenoidCompressor solenoidCompressor;
    public static BallCollector ballCollector;
    public static AHRS navx;
    public static RobotMap robotMap;
    public static OI oi;
    private Turn90degrees c;
    

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	robotMap = new RobotMapTest();
    	robotMap.init();
    	ballCollector = new BallCollector(robotMap);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrain = new Drivetrain(robotMap);
        try {
            /* Communicate w/navX MXP via the MXP SPI Bus.                                     */
            /* Alternatively:  I2C.Port.kMXP, SerialPort.Port.kMXP or SerialPort.Port.kUSB     */
            /* See http://navx-mxp.kauailabs.com/guidance/selecting-an-interface/ for details. */
            navx = new AHRS(SPI.Port.kMXP);
        } catch (RuntimeException ex ) {
            DriverStation.reportError("Error instantiating navX MXP:  " + ex.getMessage(), true);
        }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be0
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();
        c = new Turn90degrees();
    	LiveWindow.addActuator("Turn 90", "Turn 90", c.getPIDController());
    	
    	
    	CameraServer server = CameraServer.getInstance();
    	server.setQuality(50);
    	server.startAutomaticCapture("cam0");
    	//solenoidCompressor = new SolenoidCompressor();
       

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        Robot.oi.getButtonA().whenPressed(new TankDriveCommand());
        Robot.oi.getButtonB().whenPressed(new ArcadeDriveCommand());
        Robot.oi.getButtonY().whenPressed(new DriveXForward(5)); 
        Robot.oi.getButtonX().whenPressed(new DriveXForward(5));
        Robot.oi.getSelectButton().whenPressed(new ShootBall());
        Robot.oi.getStartButton().whenPressed(new CollectBall());
        Robot.oi.getLeftBumper().whenPressed(new Turn90degrees());
        Robot.oi.getRightBumper().whenPressed(new Turn90Degrees2());
        
        
        
        
        
       
    }

    /**
     * This function is called periodically during operator control
     */
 
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        
        System.out.println(drivetrain.getLeftEncoderObject().getRaw());
        System.out.println(drivetrain.getRightEncoderObject().getRaw());
        //System.out.println("This is text" + Robot.navx.getYaw());
     //  ballCollector.forwardSpinner();
        
        
        
        SmartDashboard.putBoolean(  "IMU_Connected",        navx.isConnected());
        SmartDashboard.putBoolean(  "IMU_IsCalibrating",    navx.isCalibrating());
        SmartDashboard.putNumber(   "IMU_Yaw",              navx.getYaw());
        SmartDashboard.putNumber(   "IMU_Pitch",            navx.getPitch());
        SmartDashboard.putNumber(   "IMU_Roll",             navx.getRoll());
        
        /* Display tilt-corrected, Magnetometer-based heading (requires             */
        /* magnetometer calibration to be useful)                                   */
        
        SmartDashboard.putNumber(   "IMU_CompassHeading",   navx.getCompassHeading());
        
        /* Display 9-axis Heading (requires magnetometer calibration to be useful)  */
        SmartDashboard.putNumber(   "IMU_FusedHeading",     navx.getFusedHeading());

        /* These functions are compatible w/the WPI Gyro Class, providing a simple  */
        /* path for upgrading from the Kit-of-Parts gyro to the navx-MXP            */
        
        SmartDashboard.putNumber(   "IMU_TotalYaw",         navx.getAngle());
        SmartDashboard.putNumber(   "IMU_YawRateDPS",       navx.getRate());

        /* Display Processed Acceleration Data (Linear Acceleration, Motion Detect) */
        
        SmartDashboard.putNumber(   "IMU_Accel_X",          navx.getWorldLinearAccelX());
        SmartDashboard.putNumber(   "IMU_Accel_Y",          navx.getWorldLinearAccelY());
        SmartDashboard.putBoolean(  "IMU_IsMoving",         navx.isMoving());
        SmartDashboard.putBoolean(  "IMU_IsRotating",       navx.isRotating());

        /* Display estimates of velocity/displacement.  Note that these values are  */
        /* not expected to be accurate enough for estimating robot position on a    */
        /* FIRST FRC Robotics Field, due to accelerometer noise and the compounding */
        /* of these errors due to single (velocity) integration and especially      */
        /* double (displacement) integration.                                       */
        
        SmartDashboard.putNumber(   "Velocity_X",           navx.getVelocityX());
        SmartDashboard.putNumber(   "Velocity_Y",           navx.getVelocityY());
        SmartDashboard.putNumber(   "Displacement_X",       navx.getDisplacementX());
        SmartDashboard.putNumber(   "Displacement_Y",       navx.getDisplacementY());
        
        /* Display Raw Gyro/Accelerometer/Magnetometer Values                       */
        /* NOTE:  These values are not normally necessary, but are made available   */
        /* for advanced users.  Before using this data, please consider whether     */
        /* the processed data (see above) will suit your needs.                     */
        
        SmartDashboard.putNumber(   "RawGyro_X",            navx.getRawGyroX());
        SmartDashboard.putNumber(   "RawGyro_Y",            navx.getRawGyroY());
        SmartDashboard.putNumber(   "RawGyro_Z",            navx.getRawGyroZ());
        SmartDashboard.putNumber(   "RawAccel_X",           navx.getRawAccelX());
        SmartDashboard.putNumber(   "RawAccel_Y",           navx.getRawAccelY());
        SmartDashboard.putNumber(   "RawAccel_Z",           navx.getRawAccelZ());
        SmartDashboard.putNumber(   "RawMag_X",             navx.getRawMagX());
        SmartDashboard.putNumber(   "RawMag_Y",             navx.getRawMagY());
        SmartDashboard.putNumber(   "RawMag_Z",             navx.getRawMagZ());
        SmartDashboard.putNumber(   "IMU_Temp_C",           navx.getTempC());
        
        /* Omnimount Yaw Axis Information                                           */
        /* For more info, see http://navx-mxp.kauailabs.com/installation/omnimount  */
        AHRS.BoardYawAxis yaw_axis = navx.getBoardYawAxis();
        SmartDashboard.putString(   "YawAxisDirection",     yaw_axis.up ? "Up" : "Down" );
        SmartDashboard.putNumber(   "YawAxis",              yaw_axis.board_axis.getValue() );
        
        /* Sensor Board Information                                                 */
        SmartDashboard.putString(   "FirmwareVersion",      navx.getFirmwareVersion());
        
        /* Quaternion Data                                                          */
        /* Quaternions are fascinating, and are the most compact representation of  */
        /* orientation data.  All of the Yaw, Pitch and Roll Values can be derived  */
        /* from the Quaternions.  If interested in motion processing, knowledge of  */
        /* Quaternions is highly recommended.                                       */
        SmartDashboard.putNumber(   "QuaternionW",          navx.getQuaternionW());
        SmartDashboard.putNumber(   "QuaternionX",          navx.getQuaternionX());
        SmartDashboard.putNumber(   "QuaternionY",          navx.getQuaternionY());
        SmartDashboard.putNumber(   "QuaternionZ",          navx.getQuaternionZ());
        
        /* Connectivity Debugging Support                                           */
        SmartDashboard.putNumber(   "IMU_Byte_Count",       navx.getByteCount());
        SmartDashboard.putNumber(   "IMU_Update_Count",     navx.getUpdateCount());
        
        SmartDashboard.putNumber("Left Encoder", drivetrain.getLeftEncoder());
        SmartDashboard.putNumber("Right Encoder", drivetrain.getRightEncoder());
    }

    /**
     * This function is called periodically during test mode
     */
    public void testInit(){
    	
    }
    public void testPeriodic() {
        LiveWindow.run();
        
    }
}

